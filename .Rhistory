Jong path setwd("~/Desktop/School/STAT 157/predictive-policing")
library(dplyr)
library(ggplot2)
# Vaibhav path setwd("/Users/vaibhav/Documents/Year4_Senior/Semester 1/stat157/predictive-policing")
# Jong path
setwd("~/Desktop/School/STAT 157/predictive-policing")
oak <- read.csv("01_import/input/drug_crimes_with_bins.csv")
oak$OCCURRED <- as.Date(as.character(oak$OCCURRED), format = "%m/%d/%y")
oak_grid <- readRDS("01_import/input/oakland_grid_data.rds")
oak_outline <- readRDS("01_import/input/oakland_outline.rds")
touching_dict <- readRDS("analyses/bin_touching_dictionary.rds")
oak_agg <- oak %>%
group_by(bin, OCCURRED) %>%
summarize(num_crimes = n(), mean_lag = mean(LAG)) %>%
arrange(bin) %>%
rename(date = OCCURRED) %>%
ungroup()
# Takes in aggregated DF and returns data.frame
# containing total number of crimes over last N days
# before DATE (not inclusive), per bin (grid)
# Note: Date needs to be formated as: "YYYY-MM-DD"
get_trailing_table <- function(df, date, n) {
date <- as.Date(date)
daterange <- seq(from = date - n, length.out = n, by = 1)
usedf <- df %>%
filter(date %in% daterange)
return(usedf %>%
arrange(date, bin))
}
# Takes in BIN number and returns vector of neighbor bins
get_neighbors <- function(bin) {
touching_dict[[bin]]
}
# Calculates kernelized bin score for BIN_NUM
# using crimes that fall within date range of DF
# where TODAY is today's date using exponential kernel
# (e^-r(T-t)) with r = R.
get_bin_score <- function(bin_num, df, today, r) {
today <- as.Date(today)
df <- df %>%
filter(bin == bin_num) %>%
mutate(bin_score = num_crimes*exp(-r*as.numeric(today - date)))
return(sum(df$bin_score))
}
# Takes in TRAILING_DF and returns data.frame
# with bin scores for each bin, with today's date DATE and
# discounted according to exponential kernel with rate R.
# Returned table should be arranged by descending value
# of kernelized number of crimes (bin_score)
# Note: Date needs to be formated as: "YYYY-MM-DD"
get_highest_bin_scores <- function(trailing_df, date, r) {
bin <- unique(trailing_df$bin)[!is.na(unique(trailing_df$bin))]
bin_score <- sapply(bin, get_bin_score, trailing_df, date, r)
output <- data.frame(bin, bin_score)
return(output %>% arrange(desc(bin_score)))
}
# Get predicted bins for deployment of K police on DATE using
# data from N days ahead using R rate of discounting
get_predicted_bins <- function(date, k, n, r) {
date <- as.Date(date)
t <- get_trailing_table(oak_agg, date, n)
bin_scores <- get_highest_bin_scores(t, date, r)
return(bin_scores[1:k,])
}
# Gets the best capture rate achievable on TODAY given
# K deployments using DF of crime totals
get_maximal_capture <- function(df, today, k) {
df <- df %>%
filter(date == today) %>%
arrange(desc(num_crimes))
if (length(df$bin) < k) {
return(1)
} else {
return(NA) ##EDIT
}
}
touching_dict <- readRDS("analyses/bin_touching_dictionary.rds")
head(oak_agg)
get_trailing_table
trailingdf <- get_trailing_table(oak_agg, '2010-01-01', 365)
trailingdf
oak_agg
?df
df
oak_agg
oak_agg$date
min(oak_agg$date)
max(oak_agg$date)
testBins <- get_predicted_bins("2010-02-02", 20, 365, r = 0.5)
testBins
oak_agg
testTrailing <- get_trailing_table(oak_agg, date = "2010-02-02", n = 365)
testTrailing
testTrailing$date
testTrailing$date
table(testTrailing$date)
testBins
