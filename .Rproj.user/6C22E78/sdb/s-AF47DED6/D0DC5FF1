{
    "collab_server" : "",
    "contents" : "CX: Data Science in R\n========================================================\nauthor: Arun Ramamurthy\ndate: SUSA Fall 2017\nwidth: 1600\nheight: 900\nfont-family: 'Avenir'\ntransition: linear\n<style>\n.reveal h1, .reveal h2, .reveal h3 {\n  word-wrap: normal;\n  font-size: 3em;\n  -moz-hyphens: none;\n}\n</style>\n\n```{r, echo = F}\nknitr::opts_chunk$set(warning = F, message = F, error = F, fig.align = \"center\", fig.show = \"asis\", fig.pos = 'h', fig.width=8, fig.height=4.5, dpi=300, out.width=\"940px\", out.height=\"529px\")\nlibrary(magrittr);library(dplyr);library(ggplot2);library(ggthemr);library(lubridate);library(knitr);library(googlesheets);library(broom);\ncx <- readRDS(\"cx.rds\")\n```\n\nWorkshop Overview\n=============\ntype: section\n## Installing & Using R\n## Basic R Programming\n## Data Computing in R\n## Extra Tips & Tricks\n\nBefore we begin...\n==================\ntype: prompt\n<center> <h1> https://goo.gl/LCPHpM </h1> </center>\n\nIntroduction\n=============\ntype: section\n## What is R?\n## Installing R\n## Installing RStudio\n\nWhat is R?\n==========\nR is a **programming language** for **data science**\n\nR is a tool to:  \n> **Parse** data  \n> **Read** data  \n> **Clean** data  \n> **Visualize** data  \n> **Analyze** data\n\nInstalling R\n============\ntype: alert\n<center> <h1> https://cran.r-project.org/bin/windows/base/R-3.4.1-win.exe </h1> </center>\n<center> <h1> https://cran.r-project.org/bin/macosx/R-3.4.1.pkg </h1> </center>\n\nRStudio & Rmarkdown\n=============\ntype: section\n## R vs RStudio\n## Benefits of RStudio\n## Installing and Loading Packages\n## Rmarkdown\n\nR vs RStudio\n=============\n## R is a **programming language**\n+ Run it interactively by typing `R` into your console\n+ Run a script by running e.g. `R myscript.R` in your console\n\n## RStudio is a **programming environment**\n+ Work in a Desktop (or Server) application\n+ No need to use terminal\n+ Includes a console for interactive work **and** a notebook panel for writing and running scripts\n+ Much more...\n\nBenefits of RStudio\n=====================\nRStudio easily handles:\n### Managing packages\n### Displaying help and documentation\n### Cloud computing\n### Viewing and exporting visualizations\n### Publishing reports, presentations, and websites\n### Animated and interactive plots\n### Writing in Python, C, Ruby, etc.\n### LaTeX\n### And more!\n    \n<small> Updated frequently. </small>\n\nInstalling RStudio\n============\ntype: alert\n<center> https://www.rstudio.com/products/rstudio/download </center>\n\nInstalling and Loading Packages\n================\n\nClick: `Tools/Install Packages`\n\nor run the following code:\n```{r}\n# Only for the first time you're using it on this computer\ninstall.packages(\"ggplot2\", repos = \"https://cran.cnr.berkeley.edu/\") \n# Run after each fresh R session\nlibrary(ggplot2) \n```\n\nRmarkdown\n===========\n\n<small> Rmarkdown is a powerful way to combine text, code, code output, images, LaTeX, and web elements into a single document, report, slide deck, or website. With the advent of R notebooks last year, Rmd is the best way to edit and share statistical code. </small>\n\n<center> ![](images/rnorm.png) </center>\n\n```{r}\nx = rnorm(n = 3, 0, 1) %>% round(2)\nprint(x)\n```\n\n\nBasic R Programming\n=============\ntype: section\n## Basic Syntax \n## Atomic Objects\n## Vectors\n## Lists\n## Functions\n## Dataframes\n\nBasic Syntax\n===========\nR is **case-sensitive**  \nEach command is separated by either a semicolon or a new line  \nComment with \\# (lasts the entire rest of the line)  \n\nBasic Syntax\n===========\nExpressions\n```{r Expressions}\n1 + 1\n(1+1)^3\nlog(2*2*2*2, base = 4)\n```\n\nBasic Syntax\n===========\nAssignments\n```{r Assignments}\n# The following are equivalent:\na = 1\na <- 1\n1 -> a\nprint(a)\n```\n\nAtomic Objects\n===========\nNumerics (integer, double, etc.)  \nLogicals  \nCharacters   \n\nAtomic Objects\n===========\nNumerics\n```{r}\n1\n1.3\n13e-1\n```\n\nAtomic Objects\n===========\nNumerics (cont.)\n```{r}\nprint(pi)\nclass(pi)\ntypeof(pi)\n```\n\nAtomic Objects\n===========\nLogicals\n```{r}\nwhatami <- T\nwhatru <- FALSE\nwhatami & whatru\nwhatami | whatru\n```\n\nAtomic Objects\n===========\nCharacters\n```{r}\nstr <- \"susa\"; nchar(str)\nstr2 <- \"1.3\"; str2 == 1.3\nstr3 <- paste(\"Statistics\", \"Undergraduate\", \"Student\", \"Association\"); print(str3)\n```\nUse the `stringr` package to more easily manipulate character strings.\n\nVectors\n===========\nA **vector** is an ordered sequence of values, all of the **same type**. Access by indices (**1-indexed**) or by logical vector.\n```{r}\nvec <- c(3, 1, 4, 1, 5, 9)\nvec[2]\nvec[2:4]\nvec[-c(1,3)]\nvec[vec <= 4]\n```\n\nVectors\n===========\nR has smart, **vectorized** functionality\n```{r}\nv <- c(1, 12, 169, 7)\n1/v\n2*v^2 - v + 3\nc(v, 1, 2, 3, v)\nlength(c(v, v))\n```\n\nLists\n===========\nA **list** is an ordered sequence of values of **flexible type**. In contrast to vectors, lists are much more unrestrained. \n```{r}\nl <- list(\"SUSA\", vec, c(F, T)); l\nlength(l)\nl[2] #[] returns a sublist\nl[2:3]\nl[[2]] #[[]] returns the item within the list\n```\n\nFunctions\n===========\nR uses `magirittr` to acheive its readable \"piping\" syntax \n```{r}\nsquare <- function(x, pow = 2) {return(x^pow)}\nsqrt(square(10 - 40))\n10 %>% subtract(40) %>% square %>% sqrt\n10 %>% subtract(40) %>% square(pow = 3) %>% sqrt\n```\nGet help at any time by calling e.g. `?sqrt` in your console!\n\nDataframes\n===========\nA **dataframe** is a list of (named) vectors of the same length.\n```{r}\nn <- c(\"Bobby\", \"Sally\", \"Alex\")\na <- c(19, 18, 20)\nfc <- c(\"Blue\", \"White\", \"Pink\")\nfriends <- data.frame(Names = n,\n                      Ages = a, \n                      `Favorite Color` = fc, check.names = F)\nfriend_ages <- friends %>% pull(Ages)\na == friend_ages\n```\n\nQuestions? \n=================\ntype: prompt\n\nData Computing in R\n=============\ntype: section\n## Cleaning Data\n## Analyzing Data\n## Visualizing Data\n\nCleaning Data\n==============\n**Cleaning** is the process of massaging data into the form (usually tidy) that works best for your analysis.   \n> 80% of your time working with data is spent cleaning.\n\n## Tidy Data:  \nEvery *row* should be a single **observation**   \nEvery *column* should be a single **variable**  \n![](images/tidy.png)\n\nCleaning Data\n=======\nI/O\n```{r, eval = F}\na <- read.csv(file = “path/to/file”, header = TRUE)\nb <- read.csv(file = \"www.website.com/data.csv\", header = T)\nsaveRDS(a, file = \"a_backup.rds\")\na_prime <- readRDS()\n```\n\nCleaning Data\n==============\n```{r}\nstr(cx)\n```\n\nCleaning Data\n================\ndplyr (`mutate`, Factors)\n```{r}\ncx %<>% mutate(Timestamp = mdy_hms(Timestamp), Grade = factor(Grade, levels = c(\"Freshman\", \"Sophomore\", \"Junior\", \"Senior\"), ordered = T), \n               `Favorite Ice Cream Flavor` = as.factor(`Favorite Ice Cream Flavor`))\nstr(cx)\n```\nCleaning Data\n==============\ndplyr (`select`, `arrange`)\n```{r}\ncx_students <- cx %>% select(Name, Year = Grade, Age) %>% arrange(Age)\nhead(cx_students)\n```\n\nCleaning Data\n==============\ndplyr (`filter`, `pull`)\n```{r}\ncx_frosh <- cx %>% filter(Grade == \"Freshman\") %>% pull(Name)\ncx_frosh\n```\n\nCleaning Data\n=======\nPutting it all together\n```{r}\nlink = \"https://raw.githubusercontent.com/vincentarelbundock/Rdatasets/master/csv/datasets/Titanic.csv\"\ntitanic <- read.csv(link, header = T, stringsAsFactors = F) %>%\n  select(Name, Class = PClass, Age, Sex, Survived) %>%\n  filter(Class != \"*\") %>%\n  mutate(Class = as.factor(Class), Sex = as.factor(Sex), \n         Age = round(Age, 1), Survived = (Survived == 1))\ntitanic %>% slice(1:nrow(.) %>% sample %>% head(2))\n```\n\nAnalyzing Data\n=============\nExploratory Data Analysis (EDA)\n```{r}\nsummary(cx)\n```\n\nAnalyzing Data\n=============\nExploratory Data Analysis (EDA)\n```{r}\ncx %>% group_by(Grade) %>% summarise(`Count` = n(), `Average Age` = mean(Age)) %>% arrange(desc(Count))\n```\n\nAnalyzing Data\n=====================\nRegression (`attach`, `lm`)\n```{r}\nattach(cx)\nmodel <- lm(`Coding Experience` ~ `R Experience`)\nsummary(model)\nprint(model)\ndetach(cx)\n```\n\nAnalyzing Data\n========================\nRegression (`augment`)\n```{r}\n# broom::augment adds your predictions to the original dataframe\naugment(model) %>% sample_n(3)\n```\n\nVisualizing Data\n====================\nA *visualization* is the **aesthetic mapping** of variables to **geoms**.    \n  A **geom** is a visual representation of an aspect of a dataset\n  We map variables to aesthetic properties of the geom\nA **glyph** is the visual equivalent of a single datapoint \nA **layer** is a set of *glyphs* with of the same *geom* \n\nVisualizing Data\n====================\nUse `aes(...)` to map your variables, then add geoms\n```{r}\nggplot(cx, aes(x = `Favorite Ice Cream Flavor`)) + geom_bar()\n```\n\nVisualizing Data\n====================\n`x` and `y` are by default the first two aesthetics\n`aes(...)` can go into their relevant geoms as well.\n```{r}\nggplot(cx) + geom_bar(aes(`Favorite Ice Cream Flavor`, fill = `Favorite Ice Cream Flavor`))\n```\n\nVisualizing Data\n====================\nUse `facet_wrap` (one variable) or `facet_grid` (two variables) to split into groups/tiles\n```{r}\nggplot(cx, aes(Age, col = `Country/State`, fill = `Country/State`)) + geom_density() + facet_wrap(~ `Country/State`)\n```\n\nVisualizing Data\n====================\nYou can add multiple geoms to the same plot as layers!\n```{r}\naverages <- cx %>% group_by(Grade) %>% summarise(Age = mean(Age, na.rm = F))\n\nggplot(cx, aes(Grade, Age)) + \n  geom_jitter(aes(col = Grade), size = 2) + \n  geom_tile(data = averages, alpha = .2, size = 2, aes(Grade, Age, fill = Grade)) + ggtitle(\"The CX Committee\")\n```\n\n\nSome Useful Packages\n=============\n## `tidyverse`\n## Text/Date Manipulation\n`lubridate`   \n`stringr`  \n## I/O\n`rvest`\n`googlesheets`\n`readxl`\n## Visualization: \n`ggmap`\n`ggthemr`\n`plotly`\n\nQuestions? \n=================\ntype: prompt\nFeel free to contact me at any time via Slack, email, or FB!  \n<center> <p style=\"color:blue; font-size: 3em;\"> `arun.ramamurthy@berkeley.edu` </p> </center>\n<center> <p style=\"color:pink; font-size: 3em;\"> `arun-ramamurthy` </p> </center>\n\nSUSA\n==============\n\nSUSA\n==============",
    "created" : 1508373958514.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1771586906",
    "id" : "D0DC5FF1",
    "lastKnownWriteTime" : 1506700031,
    "last_content_update" : 1506700031,
    "path" : "~/Desktop/WORKSHOP/C/SUSA/r-workshop/basic_r.Rpres",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_presentation"
}